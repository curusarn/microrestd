--- daemon.cpp.orig	2015-02-11 07:18:13.897387734 +0100
+++ daemon.cpp	2015-02-11 07:35:35.169364501 +0100
@@ -70,6 +70,10 @@
 #include <windows.h>
 #endif
 
+namespace ufal {
+namespace microrestd {
+namespace libmicrohttpd {
+
 #ifndef HAVE_ACCEPT4
 #define HAVE_ACCEPT4 0
 #endif
@@ -132,7 +136,7 @@
  * @param reason error message with details
  */
 static void
-mhd_panic_std (void *cls,
+mhd_panic_std (void * /*cls*/,
 	       const char *file,
 	       unsigned int line,
 	       const char *reason)
@@ -322,7 +326,7 @@
   if (0 == daemon->per_ip_connection_limit)
     return MHD_YES;
 
-  if (NULL == (key = malloc (sizeof(*key))))
+  if (NULL == (key = (struct MHD_IPCount*) malloc (sizeof(*key))))
     return MHD_NO;
 
   /* Initialize key */
@@ -335,7 +339,7 @@
   MHD_ip_count_lock (daemon);
 
   /* Search for the IP address */
-  if (NULL == (nodep = tsearch (key,
+  if (NULL == (nodep = (void**) tsearch (key,
 				&daemon->per_ip_connection_count,
 				&MHD_ip_addr_compare)))
     {
@@ -391,7 +395,7 @@
   MHD_ip_count_lock (daemon);
 
   /* Search for the IP address */
-  if (NULL == (nodep = tfind (&search_key,
+  if (NULL == (nodep = (void**) tfind (&search_key,
 			      &daemon->per_ip_connection_count,
 			      &MHD_ip_addr_compare)))
     {
@@ -620,7 +624,7 @@
         return MHD_NO;
     }
 #else  // ! MHD_WINSOCK_SOCKETS
-  if (fd >= fd_setsize)
+  if (fd >= int(fd_setsize))
     return MHD_NO;
 #endif // ! MHD_WINSOCK_SOCKETS
   FD_SET (fd, set);
@@ -689,7 +693,7 @@
 MHD_get_fdset2 (struct MHD_Daemon *daemon,
                fd_set *read_fd_set,
                fd_set *write_fd_set,
-               fd_set *except_fd_set,
+               fd_set * /*except_fd_set*/,
                MHD_socket *max_fd,
                unsigned int fd_setsize)
 {
@@ -762,7 +766,7 @@
 static MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_
 MHD_handle_connection (void *data)
 {
-  struct MHD_Connection *con = data;
+  struct MHD_Connection *con = (struct MHD_Connection*) data;
   int num_ready;
   fd_set rs;
   fd_set ws;
@@ -783,7 +787,7 @@
       if (timeout > 0)
 	{
 	  now = MHD_monotonic_time();
-	  if (now - con->last_activity > timeout)
+	  if (unsigned(now - con->last_activity) > timeout)
 	    tv.tv_sec = 0;
 	  else
 	    tv.tv_sec = timeout - (now - con->last_activity);
@@ -1260,7 +1264,7 @@
 #endif
 #endif
 
-  if (NULL == (connection = malloc (sizeof (struct MHD_Connection))))
+  if (NULL == (connection = (struct MHD_Connection*) malloc (sizeof (struct MHD_Connection))))
     {
       eno = errno;
 #if HAVE_MESSAGES
@@ -1294,7 +1298,7 @@
     }
 
   connection->connection_timeout = daemon->connection_timeout;
-  if (NULL == (connection->addr = malloc (addrlen)))
+  if (NULL == (connection->addr = (sockaddr*) malloc (addrlen)))
     {
       eno = errno;
 #if HAVE_MESSAGES
@@ -1827,6 +1831,7 @@
 #if HAVE_ACCEPT4
   s = accept4 (fd, addr, &addrlen, SOCK_CLOEXEC | nonblock);
 #else
+  nonblock = 0; if (nonblock) s = 0;
   s = accept (fd, addr, &addrlen);
 #endif
   if ((MHD_INVALID_SOCKET == s) || (addrlen <= 0))
@@ -1999,7 +2004,7 @@
       if (0 != pos->connection_timeout)
 	{
 	  if ( (! have_timeout) ||
-	       (earliest_deadline > pos->last_activity + pos->connection_timeout) )
+	       (earliest_deadline > time_t(pos->last_activity + pos->connection_timeout)) )
 	    earliest_deadline = pos->last_activity + pos->connection_timeout;
 #if HTTPS_SUPPORT
 	  if (  (0 != (daemon->options & MHD_USE_SSL)) &&
@@ -2015,7 +2020,7 @@
        (0 != pos->connection_timeout) )
     {
       if ( (! have_timeout) ||
-	   (earliest_deadline > pos->last_activity + pos->connection_timeout) )
+	   (earliest_deadline > time_t(pos->last_activity + pos->connection_timeout)) )
 	earliest_deadline = pos->last_activity + pos->connection_timeout;
 #if HTTPS_SUPPORT
       if (  (0 != (daemon->options & MHD_USE_SSL)) &&
@@ -2059,7 +2064,7 @@
 MHD_run_from_select (struct MHD_Daemon *daemon,
 		     const fd_set *read_fd_set,
 		     const fd_set *write_fd_set,
-		     const fd_set *except_fd_set)
+		     const fd_set * /*except_fd_set*/)
 {
   MHD_socket ds;
   char tmp;
@@ -2730,7 +2735,7 @@
 static MHD_THRD_RTRN_TYPE_ MHD_THRD_CALL_SPEC_
 MHD_select_thread (void *cls)
 {
-  struct MHD_Daemon *daemon = cls;
+  struct MHD_Daemon *daemon = (struct MHD_Daemon*) cls;
 
   while (MHD_YES != daemon->shutdown)
     {
@@ -2760,8 +2765,8 @@
  *  shorter afterwards due to elimination of escape sequences)
  */
 static size_t
-unescape_wrapper (void *cls,
-                  struct MHD_Connection *connection,
+unescape_wrapper (void * /*cls*/,
+                  struct MHD_Connection * /*connection*/,
                   char *val)
 {
   return MHD_http_unescape (val);
@@ -2979,7 +2984,7 @@
           break;
         case MHD_OPTION_THREAD_POOL_SIZE:
           daemon->worker_pool_size = va_arg (ap, unsigned int);
-	  if (daemon->worker_pool_size >= (SIZE_MAX / sizeof (struct MHD_Daemon)))
+	  if (daemon->worker_pool_size >= (UINT_MAX / sizeof (struct MHD_Daemon)))
 	    {
 #if HAVE_MESSAGES
 	      MHD_DLOG (daemon,
@@ -3404,7 +3409,7 @@
 #endif
   if (NULL == dh)
     return NULL;
-  if (NULL == (daemon = malloc (sizeof (struct MHD_Daemon))))
+  if (NULL == (daemon = (struct MHD_Daemon*) malloc (sizeof (struct MHD_Daemon))))
     return NULL;
   memset (daemon, 0, sizeof (struct MHD_Daemon));
 #if EPOLL_SUPPORT
@@ -3518,7 +3523,7 @@
 	  free (daemon);
 	  return NULL;
 	}
-      daemon->nnc = malloc (daemon->nonce_nc_size * sizeof (struct MHD_NonceNc));
+      daemon->nnc = (struct MHD_NonceNc*) malloc (daemon->nonce_nc_size * sizeof (struct MHD_NonceNc));
       if (NULL == daemon->nnc)
 	{
 #if HAVE_MESSAGES
@@ -3964,7 +3969,7 @@
 #endif /* WINDOWS && !CYGWIN */
 
       /* Allocate memory for pooled objects */
-      daemon->worker_pool = malloc (sizeof (struct MHD_Daemon)
+      daemon->worker_pool = (struct MHD_Daemon*) malloc (sizeof (struct MHD_Daemon)
                                     * daemon->worker_pool_size);
       if (NULL == daemon->worker_pool)
         goto thread_failed;
@@ -4630,5 +4635,9 @@
 
 _SET_INIT_AND_DEINIT_FUNCS(MHD_init, MHD_fini);
 
+} // namespace libmicrohttpd
+} // namespace microrestd
+} // namespace ufal
+
 /* end of daemon.c */
 
